//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 colors.
  struct color {
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 0 files.
  struct file {
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 0 fonts.
  struct font {
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 0 images.
  struct image {
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 5 nibs.
  struct nib {
    /// Nib `ProfileNavigationCell`.
    static let profileNavigationCell = _R.nib._ProfileNavigationCell()
    /// Nib `ProfilePhotoGridCell`.
    static let profilePhotoGridCell = _R.nib._ProfilePhotoGridCell()
    /// Nib `ProfilePhotoListCell`.
    static let profilePhotoListCell = _R.nib._ProfilePhotoListCell()
    /// Nib `ProfileUserInfoCell`.
    static let profileUserInfoCell = _R.nib._ProfileUserInfoCell()
    /// Nib `ProfileUserPhotoCell`.
    static let profileUserPhotoCell = _R.nib._ProfileUserPhotoCell()
    
    /// `UINib(name: "ProfileNavigationCell", in: bundle)`
    static func profileNavigationCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.profileNavigationCell)
    }
    
    /// `UINib(name: "ProfilePhotoGridCell", in: bundle)`
    static func profilePhotoGridCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.profilePhotoGridCell)
    }
    
    /// `UINib(name: "ProfilePhotoListCell", in: bundle)`
    static func profilePhotoListCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.profilePhotoListCell)
    }
    
    /// `UINib(name: "ProfileUserInfoCell", in: bundle)`
    static func profileUserInfoCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.profileUserInfoCell)
    }
    
    /// `UINib(name: "ProfileUserPhotoCell", in: bundle)`
    static func profileUserPhotoCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.profileUserPhotoCell)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 5 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `profileNavigationCell`.
    static let profileNavigationCell: Rswift.ReuseIdentifier<ProfileNavigationCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "profileNavigationCell")
    /// Reuse identifier `profilePhotoGridCell`.
    static let profilePhotoGridCell: Rswift.ReuseIdentifier<ProfilePhotoGridCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "profilePhotoGridCell")
    /// Reuse identifier `profilePhotoListCell`.
    static let profilePhotoListCell: Rswift.ReuseIdentifier<ProfilePhotoListCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "profilePhotoListCell")
    /// Reuse identifier `profileUserInfoCell`.
    static let profileUserInfoCell: Rswift.ReuseIdentifier<ProfileUserInfoCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "profileUserInfoCell")
    /// Reuse identifier `profileUserPhotoCell`.
    static let profileUserPhotoCell: Rswift.ReuseIdentifier<ProfileUserPhotoCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "profileUserPhotoCell")
    
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 0 view controllers.
  struct segue {
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 4 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    /// Storyboard `Profile`.
    static let profile = _R.storyboard.profile()
    /// Storyboard `TabBar`.
    static let tabBar = _R.storyboard.tabBar()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    
    /// `UIStoryboard(name: "Profile", bundle: ...)`
    static func profile(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.profile)
    }
    
    /// `UIStoryboard(name: "TabBar", bundle: ...)`
    static func tabBar(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.tabBar)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 0 localization tables.
  struct string {
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct nib {
    struct _ProfileNavigationCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = ProfileNavigationCollectionViewCell
      
      let bundle = R.hostingBundle
      let identifier = "profileNavigationCell"
      let name = "ProfileNavigationCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> ProfileNavigationCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ProfileNavigationCollectionViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _ProfilePhotoGridCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = ProfilePhotoGridCollectionViewCell
      
      let bundle = R.hostingBundle
      let identifier = "profilePhotoGridCell"
      let name = "ProfilePhotoGridCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> ProfilePhotoGridCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ProfilePhotoGridCollectionViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _ProfilePhotoListCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = ProfilePhotoListCollectionViewCell
      
      let bundle = R.hostingBundle
      let identifier = "profilePhotoListCell"
      let name = "ProfilePhotoListCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> ProfilePhotoListCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ProfilePhotoListCollectionViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _ProfileUserInfoCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = ProfileUserInfoCollectionViewCell
      
      let bundle = R.hostingBundle
      let identifier = "profileUserInfoCell"
      let name = "ProfileUserInfoCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> ProfileUserInfoCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ProfileUserInfoCollectionViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _ProfileUserPhotoCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = ProfileUserPhotoCollectionViewCell
      
      let bundle = R.hostingBundle
      let identifier = "profileUserPhotoCell"
      let name = "ProfileUserPhotoCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> ProfileUserPhotoCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ProfileUserPhotoCollectionViewCell
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try profile.validate()
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      fileprivate init() {}
    }
    
    struct main: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = ViewController
      
      let bundle = R.hostingBundle
      let name = "Main"
      
      fileprivate init() {}
    }
    
    struct profile: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController
      
      let bundle = R.hostingBundle
      let name = "Profile"
      let profileVC = StoryboardViewControllerResource<ProfileViewController>(identifier: "profileVC")
      
      func profileVC(_: Void = ()) -> ProfileViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: profileVC)
      }
      
      static func validate() throws {
        if _R.storyboard.profile().profileVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'profileVC' could not be loaded from storyboard 'Profile' as 'ProfileViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct tabBar: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = UIKit.UITabBarController
      
      let bundle = R.hostingBundle
      let name = "TabBar"
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
